################################################################################
#
################################################################################

#######################
# Reading in the Data #
#######################

N_SIMULS = 100
V_TIPS = [400]
NUM_STATES = 2

for(N_TIPS in V_TIPS) {
for( isimul in 1:(N_SIMULS-1)) {
# Import the morphological character matrix #
morpho <- readDiscreteCharacterData("output/output_"+N_TIPS+"/Validation_Sim_"+isimul+"/sequences.nex")

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

##############
# Tree model #
##############

phylogeny <- readTrees("data/arbol_"+N_TIPS+".nwk")[1]


#########################
# Set up the rate model #
#########################

# we assume every rate i <-> j to be exponentially distributed
rate_pr := phylogeny.treeLength() / 10
mu ~ dnExp(rate_pr)
moves.append( mvScale( mu, weight=2 ) )

# specify the rate matrix
NUM_RATES = NUM_STATES * (NUM_STATES-1)
for ( i in 1:NUM_RATES ) {
    rate[i] := mu
}


##########################
# Set up the rate matrix #
##########################

Q_morpho := fnFreeK( rate, rescale=false )



#####################################
# Set up the root state frequencies #
#####################################

# specify equal priors at the root
rf_prior <- rep(1,NUM_STATES)
rf <- simplex( rf_prior )


###################
# Set up the CTMC #
###################

# Combine all of our elements into a CTMC.

phyMorpho ~ dnPhyloCTMC(tree=phylogeny, Q=Q_morpho, rootFrequencies=rf, type="Standard")
phyMorpho.clamp(morpho)



########
# MCMC #
########

# initialize the model object #
mymodel = model(phylogeny)
# Create a vector of monitors #
# 1. for the full model #
monitors.append( mnModel(filename="output/output_"+N_TIPS+"/Validation_Sim_"+isimul+"/"+N_TIPS+"_ERM.log", printgen=1) )
# 2. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100, mu) )
# 3. add an ancestral state monitor
#monitors.append( mnJointConditionalAncestralState(tree=phylogeny,
#                                                  ctmc=phyMorpho,
#                                                  filename="output/"+N_TIPS+"_ERM.states.txt",
#                                                  type="Standard",
#                                                  printgen=1,
#                                                  withTips=true,
#                                                  withStartStates=false) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

# Run the MCMC #
mymcmc.run(generations=25000, tuningInterval=200)
}
}
# Quit RevBayes #
q()
